//////////////////////////////////////////////////////////////////////
// cookie.go
//////////////////////////////////////////////////////////////////////
package cookie

import (
    "net/http"
    "time"
)

const (
    MAX_AGE_DELETE_NOW = -1
    MAX_AGE_NO = 0
    PATH = "/"
    SECURE = true
    SAME_SITE_LAX_MODE = http.SameSiteLaxMode
    SAME_SITE_STRICT_MODE = http.SameSiteStrictMode
    SAME_SITE_NONE_MODE = http.SameSiteNoneMode
)

type Cookie struct {
    Name string
    Value string
    Path string
    Domain string
    Expires time.Time
    RawExpires string
    MaxAge int
    Secure bool
    HttpOnly bool
    SameSite http.SameSite
    Raw string
    Unparsed []string  // Raw text of unparsed attribute-value pairs
}


//////////////////////////////////////////////////////////////////////
// New Cookie.
//////////////////////////////////////////////////////////////////////
func NewCookie(name, value string) *Cookie {
    return &Cookie{
        Name: name,
        Value: value,
        Path: PATH,
        Expires: time.Now().AddDate(0, 0, 1),
        MaxAge: MAX_AGE_NO,
    }
}


//////////////////////////////////////////////////////////////////////
// Delete the cookie name.
//////////////////////////////////////////////////////////////////////
func DeleteCookieName(w http.ResponseWriter, r *http.Request, name string) error {
    c, err := r.Cookie(name)
    if err != nil {
        return err
    }
    c.MaxAge = MAX_AGE_DELETE_NOW
    http.SetCookie(w, c)
    return nil
}


//////////////////////////////////////////////////////////////////////
// Get a cookie value.
//////////////////////////////////////////////////////////////////////
func GetValue(r *http.Request, name string) (string, error) {
    c, err := r.Cookie(name)
    if err != nil {
        return "", err
    } else {
        return c.Value, nil
    }
}


//////////////////////////////////////////////////////////////////////
// Generate cookie expires.
//////////////////////////////////////////////////////////////////////
func GenerateExpires(year, month, day, minutes int) time.Time {
    return time.Now().AddDate(year, month, day).Add(time.Duration(minutes)*time.Minute)
}


//////////////////////////////////////////////////////////////////////
// Set path for Cookie.
//////////////////////////////////////////////////////////////////////
func (o *Cookie) SetPath(path string) *Cookie {
    o.Path = path
    return o
}


//////////////////////////////////////////////////////////////////////
// Set domain for Cookie.
//////////////////////////////////////////////////////////////////////
func (o *Cookie) SetDomain(domain string) *Cookie {
    o.Domain = domain
    return o
}


//////////////////////////////////////////////////////////////////////
// Set expires for Cookie.
//////////////////////////////////////////////////////////////////////
func (o *Cookie) SetExpires(expires time.Time) *Cookie {
    o.Expires = expires
    return o
}


//////////////////////////////////////////////////////////////////////
// Set rawExpires for Cookie.
//////////////////////////////////////////////////////////////////////
func (o *Cookie) SetRawExpires(rawExpires string) *Cookie {
    o.RawExpires = rawExpires
    return o
}


//////////////////////////////////////////////////////////////////////
// Set maxAge for Cookie.
//////////////////////////////////////////////////////////////////////
func (o *Cookie) SetMaxAge(maxAge int) *Cookie {
    o.MaxAge = maxAge
    return o
}


//////////////////////////////////////////////////////////////////////
// Set secure for Cookie.
//////////////////////////////////////////////////////////////////////
func (o *Cookie) SetSecure(secure bool) *Cookie {
    o.Secure = secure
    return o 
}


//////////////////////////////////////////////////////////////////////
// Set httpOnly for Cookie.
//////////////////////////////////////////////////////////////////////
func (o *Cookie) SetHttpOnly(httpOnly bool) *Cookie {
    o.HttpOnly = httpOnly
    return o
}


//////////////////////////////////////////////////////////////////////
// Set sameSite for Cookie.
//////////////////////////////////////////////////////////////////////
func (o *Cookie) SetSameSite(sameSite http.SameSite) *Cookie {
    o.SameSite = sameSite
    return o
}


//////////////////////////////////////////////////////////////////////
// Set raw for Cookie.
//////////////////////////////////////////////////////////////////////
func (o *Cookie) SetRaw(raw string) *Cookie {
    o.Raw = raw
    return o
}


//////////////////////////////////////////////////////////////////////
// Set unparsed for Cookie.
//////////////////////////////////////////////////////////////////////
func (o *Cookie) SetUnparsed(unparsed []string) *Cookie {
    o.Unparsed = unparsed
    return o
}


//////////////////////////////////////////////////////////////////////
// Set cookie.
//////////////////////////////////////////////////////////////////////
func (o *Cookie) Set(w http.ResponseWriter) {
    http.SetCookie(w, &http.Cookie{
        Name: o.Name,
        Value: o.Value,
        Path:  o.Path,
        Domain: o.Domain,
        Expires: o.Expires,
        RawExpires: o.RawExpires,
        MaxAge: o.MaxAge,
        Secure: o.Secure,
        HttpOnly: o.HttpOnly,
        SameSite: o.SameSite,
        Raw: o.Raw,
        Unparsed: o.Unparsed,
    })
}
