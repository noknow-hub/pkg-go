//////////////////////////////////////////////////////////////////////
// validator.go
//////////////////////////////////////////////////////////////////////
package validator

import (
    "regexp"
    "strconv"
    "time"
    "unicode/utf8"
)

const (
    ERR_CODE_NONE = 0
    ERR_CODE_REQUIRED = 1
    ERR_CODE_EQUAL = 2
    ERR_CODE_NOT_EQUAL = 3
    ERR_CODE_GREATER_THAN = 4
    ERR_CODE_GREATER_THAN_OR_EQUAL = 5
    ERR_CODE_LESS_THAN = 6
    ERR_CODE_LESS_THAN_OR_EQUAL = 7
    ERR_CODE_NOT_ONLY_NUMBERS = 8
    ERR_CODE_OUT_OF_RANGE_VALUE = 9
    ERR_CODE_INVALID_VALUE = 10
)

var (
    emailReg = regexp.MustCompile("^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$")
    numReg = regexp.MustCompile("^[0-9]+$")
)

type Result struct {
    ErrCode int
    ErrMsg string
}
type vString string
type vInt int


//////////////////////////////////////////////////////////////////////
// Generate a `Result` sturct.
//////////////////////////////////////////////////////////////////////
func GenerateResult(errCode int, errMsg string) *Result {
    return &Result{
        ErrCode: errCode,
        ErrMsg: errMsg,
    }
}


//////////////////////////////////////////////////////////////////////
// Generate a `Result` sturct for "none".
//////////////////////////////////////////////////////////////////////
func GenerateResultNone() *Result {
    return &Result{
        ErrCode: ERR_CODE_NONE,
        ErrMsg: "",
    }
}


//////////////////////////////////////////////////////////////////////
// New string.
//////////////////////////////////////////////////////////////////////
func NewString(s string) vString {
    return vString(s)
}


//////////////////////////////////////////////////////////////////////
// New int.
//////////////////////////////////////////////////////////////////////
func NewInt(i int) vInt {
    return vInt(i)
}


//////////////////////////////////////////////////////////////////////
// Required.
//////////////////////////////////////////////////////////////////////
func (o vString) Required() bool {
    return string(o) == ""
}


//////////////////////////////////////////////////////////////////////
// Equal.
//////////////////////////////////////////////////////////////////////
func (o vString) Equal(num int) bool {
    return utf8.RuneCountInString(string(o)) == num
}


//////////////////////////////////////////////////////////////////////
// Not equal.
//////////////////////////////////////////////////////////////////////
func (o vString) NotEqual(num int) bool {
    return utf8.RuneCountInString(string(o)) != num
}


//////////////////////////////////////////////////////////////////////
// Greater than.
//////////////////////////////////////////////////////////////////////
func (o vString) GreaterThan(num int) bool {
    return utf8.RuneCountInString(string(o)) > num
}


//////////////////////////////////////////////////////////////////////
// Greater than or equal.
//////////////////////////////////////////////////////////////////////
func (o vString) GreaterThanOrEqual(num int) bool {
    return utf8.RuneCountInString(string(o)) >= num
}


//////////////////////////////////////////////////////////////////////
// Less than.
//////////////////////////////////////////////////////////////////////
func (o vString) LessThan(num int) bool {
    return utf8.RuneCountInString(string(o)) < num
}


//////////////////////////////////////////////////////////////////////
// Less than or equal.
//////////////////////////////////////////////////////////////////////
func (o vString) LessThanOrEqual(num int) bool {
    return utf8.RuneCountInString(string(o)) <= num
}


//////////////////////////////////////////////////////////////////////
// Not only datetime.
//////////////////////////////////////////////////////////////////////
func (o vString) NotDateTime(layout string) bool {
    if _, err := time.Parse(layout, string(o)); err != nil {
        return true
    }
    return false
}

//////////////////////////////////////////////////////////////////////
// Not only numbers.
//////////////////////////////////////////////////////////////////////
func (o vString) NotOnlyNumbers() bool {
    return !numReg.Match([]byte(string(o)))
}


//////////////////////////////////////////////////////////////////////
// Out of range value for "BIGINT UNSIGNED".
//////////////////////////////////////////////////////////////////////
func (o vString) OutOfRangeValueForBigIntUnsigned() bool {
    i, err := strconv.ParseUint(string(o), 10, 64)
    if err != nil {
        return true
    }
    if i < 0 || i > 18446744073709551615 {
        return true
    }
    return false
}


//////////////////////////////////////////////////////////////////////
// Out of range value for "INT".
//////////////////////////////////////////////////////////////////////
func (o vString) OutOfRangeValueForInt() bool {
    i, err := strconv.ParseInt(string(o), 10, 64)
    if err != nil {
        return true
    }
    if i < -2147483648 || i > 2147483647 {
        return true
    }
    return false
}


//////////////////////////////////////////////////////////////////////
// Out of range value for "INT UNSIGNED".
//////////////////////////////////////////////////////////////////////
func (o vString) OutOfRangeValueForIntUnsigned() bool {
    i, err := strconv.ParseUint(string(o), 10, 64)
    if err != nil {
        return true
    }
    if i < 0 || i > 4294967295 {
        return true
    }
    return false
}


//////////////////////////////////////////////////////////////////////
// Out of range value for "TINYINT UNSIGNED".
//////////////////////////////////////////////////////////////////////
func (o vString) OutOfRangeValueForTinyIntUnsigned() bool {
    i, err := strconv.ParseUint(string(o), 10, 64)
    if err != nil {
        return true
    }
    if i < 0 || i > 255 {
        return true
    }
    return false
}


//////////////////////////////////////////////////////////////////////
// Out of range value for "TEXT".
//////////////////////////////////////////////////////////////////////
func (o vString) OutOfRangeValueForText() bool {
    if utf8.RuneCountInString(string(o)) < 0 || utf8.RuneCountInString(string(o)) > 65535 {
        return true
    }
    return false
}


//////////////////////////////////////////////////////////////////////
// Out of range value for "LONGTEXT".
//////////////////////////////////////////////////////////////////////
func (o vString) OutOfRangeValueForLongText() bool {
    if utf8.RuneCountInString(string(o)) < 0 || utf8.RuneCountInString(string(o)) > 4294967295 {
        return true
    }
    return false
}


//////////////////////////////////////////////////////////////////////
// Out of range value for "DECIMAL(M,D)".
//////////////////////////////////////////////////////////////////////
func (o vString) OutOfRangeValueForDecimalMDUnsigned(m, d int) bool {
    f, err := strconv.ParseFloat(string(o), 64)
    if err != nil {
        return true
    }
    max := 0
    for i := 0; i < m - d; i++ {
        max = max*10 + 9
    }
    if f < 0 || f > float64(max + 1) {
        return true
    }
    return false
}


//////////////////////////////////////////////////////////////////////
// Invalid value for "email".
//////////////////////////////////////////////////////////////////////
func (o vString) InvalidValueForEmail() bool {
    return !emailReg.MatchString(string(o))
}


//////////////////////////////////////////////////////////////////////
// Required.
//////////////////////////////////////////////////////////////////////
func (o vInt) Required() bool {
    return int(o) == 0
}


//////////////////////////////////////////////////////////////////////
// Get the error code for "none".
//////////////////////////////////////////////////////////////////////
func (r *Result) GetErrCodeNone() int {
    return ERR_CODE_NONE
}


//////////////////////////////////////////////////////////////////////
// Get the error code for "required".
//////////////////////////////////////////////////////////////////////
func (r *Result) GetErrCodeRequired() int {
    return ERR_CODE_REQUIRED
}


//////////////////////////////////////////////////////////////////////
// Get the error code for "equal".
//////////////////////////////////////////////////////////////////////
func (r *Result) GetErrCodeEqual() int {
    return ERR_CODE_EQUAL
}


//////////////////////////////////////////////////////////////////////
// Get the error code for "not equal".
//////////////////////////////////////////////////////////////////////
func (r *Result) GetErrCodeNotEqual() int {
    return ERR_CODE_NOT_EQUAL
}


//////////////////////////////////////////////////////////////////////
// Get the error code for "greater than".
//////////////////////////////////////////////////////////////////////
func (r *Result) GetErrCodeGreaterThan() int {
    return ERR_CODE_GREATER_THAN
}


//////////////////////////////////////////////////////////////////////
// Get the error code for "greater than or equal".
//////////////////////////////////////////////////////////////////////
func (r *Result) GetErrCodeGreaterThanOrEqual() int {
    return ERR_CODE_GREATER_THAN_OR_EQUAL
}


//////////////////////////////////////////////////////////////////////
// Get the error code for "less than".
//////////////////////////////////////////////////////////////////////
func (r *Result) GetErrCodeLessThan() int {
    return ERR_CODE_LESS_THAN
}


//////////////////////////////////////////////////////////////////////
// Get the error code for "less than or equal".
//////////////////////////////////////////////////////////////////////
func (r *Result) GetErrCodeLessThanOrEqual() int {
    return ERR_CODE_LESS_THAN_OR_EQUAL
}


//////////////////////////////////////////////////////////////////////
// Get the error code for "not only numbers".
//////////////////////////////////////////////////////////////////////
func (r *Result) GetErrCodeNotOnlyNumbers() int {
    return ERR_CODE_NOT_ONLY_NUMBERS
}


//////////////////////////////////////////////////////////////////////
// Get the error code for "out of range value".
//////////////////////////////////////////////////////////////////////
func (r *Result) GetErrCodeOutOfRangeValue() int {
    return ERR_CODE_OUT_OF_RANGE_VALUE
}


//////////////////////////////////////////////////////////////////////
// Get the error code for "invalid value".
//////////////////////////////////////////////////////////////////////
func (r *Result) GetErrCodeInvalidValue() int {
    return ERR_CODE_INVALID_VALUE
}
